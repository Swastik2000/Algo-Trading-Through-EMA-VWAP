// Created By Swastik Mishra
// Ideal For 15 Mins, Bank Nifty Futures

//@version=4


strategy(title="mainScript", shorttitle="mainScript", overlay=true)

// Script For VWAP
computeVWAP(src, isNewPeriod, stDevMultiplier) =>
	var float sumSrcVol = na
	var float sumVol = na
    var float sumSrcSrcVol = na
    
	sumSrcVol := isNewPeriod ? src * volume : src * volume + sumSrcVol[1]
	sumVol := isNewPeriod ? volume : volume + sumVol[1]
	// sumSrcSrcVol calculates the dividend of the equation that is later used to calculate the standard deviation
	sumSrcSrcVol := isNewPeriod ? volume * pow(src, 2) : volume * pow(src, 2) + sumSrcSrcVol[1]
	
	_vwap = sumSrcVol / sumVol
	variance = sumSrcSrcVol / sumVol - pow(_vwap, 2)
	variance := variance < 0 ? 0 : variance
	stDev = sqrt(variance)
	
	lowerBand = _vwap - stDev * stDevMultiplier
	upperBand = _vwap + stDev * stDevMultiplier
	
	[_vwap, lowerBand, upperBand]

hideonDWM = input(false, title="Hide VWAP on 1D or Above", group="VWAP Settings")
var anchor = input(defval = "Session", title="Anchor Period", type=input.string, 
 options=["Session", "Week", "Month", "Quarter", "Year", "Decade", "Century", "Earnings", "Dividends", "Splits"], group="VWAP Settings")
src = input(title = "Source", type = input.source, defval = hlc3, group="VWAP Settings")
offset = input(0, title="Offset", group="VWAP Settings")

showBands = input(true, title="Calculate Bands", group="Standard Deviation Bands Settings")
stdevMult = input(1.0, title="Bands Multiplier", group="Standard Deviation Bands Settings")

timeChange(period) =>
	change(time(period))

new_earnings = earnings(syminfo.tickerid, earnings.actual, barmerge.gaps_on, barmerge.lookahead_on)
new_dividends = dividends(syminfo.tickerid, dividends.gross, barmerge.gaps_on, barmerge.lookahead_on)
new_split = splits(syminfo.tickerid, splits.denominator, barmerge.gaps_on, barmerge.lookahead_on)

isNewPeriod = anchor == "Earnings" ? new_earnings :
 anchor == "Dividends" ? new_dividends :
 anchor == "Splits" ? new_split :
 na(src[1]) ? true :
 anchor == "Session" ? timeChange("D") :
 anchor == "Week" ? timeChange("W") :
 anchor == "Month" ? timeChange("M") :
 anchor == "Quarter" ? timeChange("3M") :
 anchor == "Year" ? timeChange("12M") :
 anchor == "Decade" ? timeChange("12M") and year % 10 == 0 :
 anchor == "Century" ? timeChange("12M") and year % 100 == 0 :
 false
	
float vwapValue = na
float std = na
float upperBandValue = na
float lowerBandValue = na

if not (hideonDWM and timeframe.isdwm)
    [_vwap, bottom, top] = computeVWAP(src, isNewPeriod, stdevMult)
    vwapValue := _vwap
    upperBandValue := showBands ? top : na
    lowerBandValue := showBands ? bottom : na

// VWAPplot = plot(vwapValue, title="VWAP", offset=offset)

VWAPplot = vwapValue

// upperBand = plot(upperBandValue, title="Upper Band", color=color.green, offset=offset)
// lowerBand = plot(lowerBandValue, title="Lower Band", color=color.green, offset=offset)
// fill(upperBand, lowerBand, title="Bands Fill", color= showBands ? color.new(color.green, 95) : na)

// Script for MAE 
lenMAE = input(9, minval=1, title="Length")
srcMAE = input(close, title="Source")
offsetMAE = input(title="Offset", type=input.integer, defval=0, minval=-500, maxval=500)
outMAE = ema(srcMAE, lenMAE)

// MAEplot = plot(outMAE, title="EMA", color=color.blue, offset=offset)

MAEplot = outMAE

// LOGIC
// VWAP is Stationary and MAE is variable 
// MAE cross over VWAP Buy
// MAE cross under VWAP sell

// Code for cross-over
longCondition = crossover(MAEplot, VWAPplot)
shortCondition = crossunder(MAEplot, VWAPplot)
    
longExitCondition = crossunder(MAEplot, VWAPplot)
shortExitCondition = crossover(MAEplot, VWAPplot)


// Code for Trade Order
if (longCondition)
    strategy.entry("Long Entry", strategy.long)
if (shortCondition)
    strategy.entry("Short Entry", strategy.short)


strategy.close("Long Closed", when = longExitCondition)
strategy.close("Short Closed", when = shortExitCondition)
